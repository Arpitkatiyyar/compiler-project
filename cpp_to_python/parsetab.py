
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COUT DIV ELSE EQ FLOAT FOR GT ID IF INT LBRACE LPAREN LT MINUS MOD MULT NEQ NUMBER PLUS RBRACE RPAREN SEMICOLON STRING STRING_LITERAL WHILEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : INT ID ASSIGN expression SEMICOLON\n                 | FLOAT ID ASSIGN expression SEMICOLON\n                 | STRING ID ASSIGN STRING_LITERAL SEMICOLONstatement : ID ASSIGN expression SEMICOLONstatement : COUT LT LT expression SEMICOLONstatement : IF LPAREN expression RPAREN statement\n                 | IF LPAREN expression RPAREN statement ELSE statementstatement : WHILE LPAREN expression RPAREN statementstatement : FOR LPAREN INT ID ASSIGN expression SEMICOLON expression SEMICOLON assignment RPAREN statementstatement : LBRACE statement_list RBRACEassignment : ID ASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULT expression\n                  | expression DIV expression\n                  | expression MOD expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression EQ expression\n                  | expression NEQ expressionexpression : NUMBERexpression : IDexpression : LPAREN expression RPARENexpression : STRING_LITERAL'
    
_lr_action_items = {'INT':([0,2,3,12,13,21,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[4,4,-2,4,-3,34,4,-13,-7,4,4,-4,-5,-6,-8,-9,-11,4,-10,4,-12,]),'FLOAT':([0,2,3,12,13,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[6,6,-2,6,-3,6,-13,-7,6,6,-4,-5,-6,-8,-9,-11,6,-10,6,-12,]),'STRING':([0,2,3,12,13,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[7,7,-2,7,-3,7,-13,-7,7,7,-4,-5,-6,-8,-9,-11,7,-10,7,-12,]),'ID':([0,2,3,4,6,7,12,13,15,19,20,22,23,27,29,31,34,35,37,38,39,40,41,42,43,44,45,46,51,52,54,65,66,67,68,69,70,71,73,74,76,79,80,82,],[5,5,-2,14,16,17,5,-3,24,24,24,5,24,24,24,24,53,-13,-7,24,24,24,24,24,24,24,24,24,5,5,-4,-5,-6,-8,-9,-11,24,5,-10,24,77,24,5,-12,]),'COUT':([0,2,3,12,13,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[8,8,-2,8,-3,8,-13,-7,8,8,-4,-5,-6,-8,-9,-11,8,-10,8,-12,]),'IF':([0,2,3,12,13,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[9,9,-2,9,-3,9,-13,-7,9,9,-4,-5,-6,-8,-9,-11,9,-10,9,-12,]),'WHILE':([0,2,3,12,13,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[10,10,-2,10,-3,10,-13,-7,10,10,-4,-5,-6,-8,-9,-11,10,-10,10,-12,]),'FOR':([0,2,3,12,13,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[11,11,-2,11,-3,11,-13,-7,11,11,-4,-5,-6,-8,-9,-11,11,-10,11,-12,]),'LBRACE':([0,2,3,12,13,22,35,37,51,52,54,65,66,67,68,69,71,73,80,82,],[12,12,-2,12,-3,12,-13,-7,12,12,-4,-5,-6,-8,-9,-11,12,-10,12,-12,]),'$end':([1,2,3,13,35,37,54,65,66,67,68,69,73,82,],[0,-1,-2,-3,-13,-7,-4,-5,-6,-8,-9,-11,-10,-12,]),'RBRACE':([3,13,22,35,37,54,65,66,67,68,69,73,82,],[-2,-3,35,-13,-7,-4,-5,-6,-8,-9,-11,-10,-12,]),'ASSIGN':([5,14,16,17,53,77,],[15,23,29,30,70,79,]),'LT':([8,18,24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[18,31,-25,43,-24,-27,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-26,43,43,43,]),'LPAREN':([9,10,11,15,19,20,23,27,29,31,38,39,40,41,42,43,44,45,46,70,74,79,],[19,20,21,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'NUMBER':([15,19,20,23,27,29,31,38,39,40,41,42,43,44,45,46,70,74,79,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'STRING_LITERAL':([15,19,20,23,27,29,30,31,38,39,40,41,42,43,44,45,46,70,74,79,],[28,28,28,28,28,28,49,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'SEMICOLON':([24,25,26,28,36,48,49,50,55,56,57,58,59,60,61,62,63,64,72,75,],[-25,37,-24,-27,54,65,66,67,-15,-16,-17,-18,-19,-20,-21,-22,-23,-26,74,76,]),'PLUS':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,38,-24,-27,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-26,38,38,38,]),'MINUS':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,39,-24,-27,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-26,39,39,39,]),'MULT':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,40,-24,-27,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-26,40,40,40,]),'DIV':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,41,-24,-27,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-26,41,41,41,]),'MOD':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,42,-24,-27,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-26,42,42,42,]),'GT':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,44,-24,-27,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-26,44,44,44,]),'EQ':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,45,-24,-27,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-26,45,45,45,]),'NEQ':([24,25,26,28,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,64,72,75,81,],[-25,46,-24,-27,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-26,46,46,46,]),'RPAREN':([24,26,28,32,33,47,55,56,57,58,59,60,61,62,63,64,78,81,],[-25,-24,-27,51,52,64,-15,-16,-17,-18,-19,-20,-21,-22,-23,-26,80,-14,]),'ELSE':([35,37,54,65,66,67,68,69,73,82,],[-13,-7,-4,-5,-6,-8,71,-11,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,12,],[2,22,]),'statement':([0,2,12,22,51,52,71,80,],[3,13,3,13,68,69,73,82,]),'expression':([15,19,20,23,27,29,31,38,39,40,41,42,43,44,45,46,70,74,79,],[25,32,33,36,47,48,50,55,56,57,58,59,60,61,62,63,72,75,81,]),'assignment':([76,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',9),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement -> INT ID ASSIGN expression SEMICOLON','statement',5,'p_statement_declaration','parser.py',24),
  ('statement -> FLOAT ID ASSIGN expression SEMICOLON','statement',5,'p_statement_declaration','parser.py',25),
  ('statement -> STRING ID ASSIGN STRING_LITERAL SEMICOLON','statement',5,'p_statement_declaration','parser.py',26),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement_assignment','parser.py',33),
  ('statement -> COUT LT LT expression SEMICOLON','statement',5,'p_statement_print','parser.py',37),
  ('statement -> IF LPAREN expression RPAREN statement','statement',5,'p_statement_if','parser.py',41),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement_if','parser.py',42),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_statement_while','parser.py',49),
  ('statement -> FOR LPAREN INT ID ASSIGN expression SEMICOLON expression SEMICOLON assignment RPAREN statement','statement',12,'p_statement_for','parser.py',53),
  ('statement -> LBRACE statement_list RBRACE','statement',3,'p_statement_block','parser.py',61),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',68),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',75),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',76),
  ('expression -> expression MULT expression','expression',3,'p_expression_binop','parser.py',77),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',78),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','parser.py',79),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',80),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',81),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',82),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',83),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',87),
  ('expression -> ID','expression',1,'p_expression_var','parser.py',91),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',95),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string','parser.py',99),
]
